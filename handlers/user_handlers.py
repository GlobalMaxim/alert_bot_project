from datetime import datetime
from aiogram.types import ParseMode, ChatJoinRequest
from mailing.mailing import Mailing
from telebot import dp, bot
from aiogram.types import Message, ReplyKeyboardRemove
from config import admin_id, CHANEL_ID, ANSWER_TEXT
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from keyboards.default.menu import menu, menu_2, show_chanels
from keyboards.mailing.regionsMarkup import regions_markup
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from telegram_redis.redisPreparation import Redis_Preparation
from utils.misc.throttling import rate_limit
import logging

logging.basicConfig(level=logging.WARNING, filename='log/user_handlers-log.txt')

async def check_sub_chanel(chanel_id, user_id):
    chat_member = await bot.get_chat_member(chanel_id, user_id)
    if chat_member['status'] != 'left':
        return True
    else:
        return False

@dp.chat_join_request_handler()
async def start_user(message: Message | ChatJoinRequest):
    try:
        print('New invite user')
        # if type(message) == ChatJoinRequest:
        #     await message.approve()
        chat_id = message.from_user.id
        # if await check_sub_chanel(CHANEL_ID[0], chat_id):
        r = Redis_Preparation()
        r.create_new_user_to_redis(message)
        
        name = message.from_user.first_name
        mail = Mailing()
        is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
        if is_user_uses_alert == True:
            markup = menu_2
        else:
            markup = menu
        await bot.send_message(chat_id=chat_id, text=f'‚úÖ –ü—Ä–∏–≤—ñ—Ç, {name}! –¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç, —â–æ —ñ–Ω—Ñ–æ—Ä–º—É—î –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É –≤ –±—É–¥—å-—è–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏.\n\n‚ö°Ô∏è–ö–æ–º–∞–Ω–¥–æ—é /region –æ–±–µ—Ä–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å', reply_markup=markup)
        # else:
        #     msg = await bot.send_message(chat_id, "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        #     await bot.delete_message(chat_id, msg['message_id'])
        #     await bot.send_message(chat_id, ANSWER_TEXT, reply_markup=show_chanels())
    except:
        logging.exception('\n'+'Start User log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')

@rate_limit(limit=10)
# @dp.chat_join_request_handler()
@dp.message_handler(CommandStart())
async def start_user(message: Message | ChatJoinRequest):
    try:
        # if type(message) == ChatJoinRequest:
        #     await message.approve()
        chat_id = message.from_user.id
        if await check_sub_chanel(CHANEL_ID[0], chat_id):
            r = Redis_Preparation()
            r.create_new_user_to_redis(message)
            
            name = message.from_user.first_name
            mail = Mailing()
            is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
            if is_user_uses_alert == True:
                markup = menu_2
            else:
                markup = menu
            await bot.send_message(chat_id=chat_id, text=f'‚úÖ –ü—Ä–∏–≤—ñ—Ç, {name}! –¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç, —â–æ —ñ–Ω—Ñ–æ—Ä–º—É—î –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É –≤ –±—É–¥—å-—è–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏.\n\n‚ö°Ô∏è–ö–æ–º–∞–Ω–¥–æ—é /region –æ–±–µ—Ä–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å', reply_markup=markup)
        else:
            msg = await bot.send_message(chat_id, "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id, msg['message_id'])
            await bot.send_message(chat_id, ANSWER_TEXT, reply_markup=show_chanels())
    except:
        logging.exception('\n'+'Start User log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')

@dp.message_handler(Text(equals=["üó∫–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥"]))
@rate_limit(limit=10)
async def run(message: Message):
    try:
        chat_id = message.from_user.id
        if await check_sub_chanel(CHANEL_ID[0], chat_id):
            mail = Mailing()
            is_user_uses_alert = mail.is_user_alert_active(chat_id)
            if is_user_uses_alert == True:
                markup = menu_2
            else:
                markup = menu
            # if chat_id not in admin_id:
            #     notify_admin=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @{message.from_user.username}, {message.from_user.first_name}, {message.from_user.id} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º"
            #     await bot.send_message(admin_id[0], text=notify_admin, disable_notification=True)
            # await message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ...')
            r = Redis_Preparation()
            res = r.get_regions_from_redis()
            current_date = str(datetime.now().strftime('%H:%M %d-%m-%Y'))
            if len(res['regions']) > 0:
                await message.answer('–¢—Ä–∏–≤–æ–≥–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö:')
                for i in res['regions']:
                    await message.answer(f"üõë <b>{i['name']}</b>\n–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏ —É {i['changed']}\n@Official_alarm_bot", parse_mode=ParseMode.HTML)
                # await message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è —Ñ–æ—Ç–æ...')
                await message.answer_photo(photo=open('screenshot.png', 'rb'), caption=f"<b>‚ùóÔ∏è–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ —Å—Ç–∞–Ω–æ–º –Ω–∞ {current_date}</b>\n\n@Official_alarm_bot", parse_mode=ParseMode.HTML, reply_markup=markup)
           
                # await message.answer(f"<b>‚ùóÔ∏è–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ —Å—Ç–∞–Ω–æ–º –Ω–∞ {res['regions'][0]['last_update']}</b>\n\n@Official_alarm_bot", parse_mode=ParseMode.HTML, reply_markup=markup)
            else:
                
                await message.answer('–¢—Ä–∏–≤–æ–≥ –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î!')
            r.create_user_updates_to_redis(message)
        else:
            msg = await bot.send_message(chat_id, "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id, msg['message_id'])
            await bot.send_message(chat_id, ANSWER_TEXT, reply_markup=show_chanels())
    except:
        logging.exception('\n'+'Get Alert Map log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')

@dp.callback_query_handler(text='subchanneldone')
async def channeldone(message: Message):
    try:
        chat_id = message.from_user.id
        await bot.delete_message(chat_id, message.message.message_id)
        if await check_sub_chanel(CHANEL_ID[0], chat_id):
            mail = Mailing()
            is_user_uses_alert = mail.is_user_alert_active(chat_id)
            if is_user_uses_alert == True:
                markup = menu_2
            else:
                markup = menu
            await bot.send_message(chat_id=chat_id, text=f'–î–æ—Å—Ç—É–ø —Ä–∞–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!', reply_markup=markup)
        else:
            await bot.send_message(chat_id, ANSWER_TEXT, reply_markup=show_chanels())
    except:
        logging.exception('\n'+'Callback subchaneldone log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')
        

\
@dp.message_handler(commands=['region'])
@rate_limit(limit=5)
@dp.message_handler(Text(equals=["üì¢–£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É"]))
async def send_mail(message: Message):
    try:
        chat_id = message.from_user.id
        if await check_sub_chanel(CHANEL_ID[0], message.from_user.id):
            await message.answer(text='üìç–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ, –¥–µ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:', reply_markup=regions_markup)
        else:
            msg = await bot.send_message(chat_id, "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id, msg['message_id'])
            await bot.send_message(message.from_user.id, ANSWER_TEXT, reply_markup=show_chanels())
    except:
        logging.exception('\n'+'Turn On alert log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')

@dp.callback_query_handler()
async def save_user_region(call: CallbackQuery):
    mail = Mailing()
    try:
        if call.data == 'cancel':
            await call.message.edit_reply_markup()
            await call.message.delete()
            await bot.send_message(chat_id=call.from_user.id, text= f'‚ùóÔ∏è–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ —Ä–µ–≥—ñ–æ–Ω')
            mail.stop_mailing(call)
        else:
            await bot.answer_callback_query(callback_query_id=call.id, text= f'{call.data}', cache_time=1)
            await call.message.edit_reply_markup()
            await mail.save_user_mailing(call)
            await bot.send_message(chat_id=call.from_user.id, text= f'‚úÖ–í—ñ—Ç–∞—é, –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ–π —Ç—Ä–∏–≤–æ–∑—ñ —É <b>"{call.data}"</b>', parse_mode=ParseMode.HTML, reply_markup=menu_2)
            await mail.check_is_active_user_region(bot, call)
        # await call.answer()
        # print('Answered')
    except:
        logging.exception('\n'+'Save User Region log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')
        

@dp.message_handler(Text(equals=["‚ùå–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É"]))
async def send_mail(message: Message):
    try:
        if await check_sub_chanel(CHANEL_ID[0], message.from_user.id):
            mail = Mailing()
            mail.stop_mailing(message)
            await message.answer(text='‚ùóÔ∏è–í–∏ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏', reply_markup=menu)
        else:
            msg = await bot.send_message(message.from_user.id, "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(message.from_user.id, msg['message_id'])
            await bot.send_message(message.from_user.id, ANSWER_TEXT, reply_markup=show_chanels())
    except:
        logging.exception('\n'+'Turn Off Alert log! ' + '\n' + str(datetime.now().strftime("%d-%m-%Y %H:%M"))+ '\n')


@dp.message_handler(CommandHelp())
async def bot_help(message: Message):
    text = [
        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ',
        '/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥',
        '/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        '/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å'
    ]
    await message.answer('\n'.join(text))

@dp.message_handler(Text('–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!üá∫üá¶'))
async def register_user(message: Message):
    await message.answer('–ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞!üá∫üá¶')

@rate_limit(limit=5)
@dp.message_handler()
async def register_user(message: Message):
    mail = Mailing()
    is_user_uses_alert = mail.is_user_alert_active(message.from_user.id)
    if is_user_uses_alert == True:
        markup = menu_2
    else:
        markup = menu
    chat_id = message.from_user.id
    name = message.from_user.first_name
    await bot.send_message(chat_id=chat_id, text=f'{name}, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', reply_markup=markup)


